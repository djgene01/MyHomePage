@page "/solardashboard"
@inject IJSRuntime JS
@implements IDisposable
@using Microsoft.AspNetCore.SignalR.Client
@using MyHomePage.Services

<PageTitle>Solar Energy Dashboard</PageTitle>

<div class="drawer lg:drawer-open" data-theme="@(isDarkMode ? "dark" : "light")">
    <input id="my-drawer-2" type="checkbox" class="drawer-toggle" />
    <div class="drawer-content flex flex-col p-4">
        <!-- Header -->
        <div class="flex justify-between items-center mb-6">
            <div>
                <label for="my-drawer-2" class="btn btn-primary drawer-button lg:hidden">
                    <i class="fas fa-bars"></i>
                </label>
            </div>
            <h1 class="text-2xl font-bold text-center flex-grow lg:text-left">Solar Energy Dashboard</h1>
            <div class="flex items-center gap-4">
                <label class="swap swap-rotate">
                    <input type="checkbox" @bind="isDarkMode" />
                    <i class="fas fa-sun swap-on text-yellow-500 text-2xl"></i>
                    <i class="fas fa-moon swap-off text-gray-500 text-2xl"></i>
                </label>
                <div class="dropdown dropdown-end">
                    <label tabindex="0" class="btn btn-ghost btn-circle avatar">
                        <div class="w-10 rounded-full">
                            <img src="https://api.dicebear.com/6.x/initials/svg?seed=EB" alt="User" />
                        </div>
                    </label>
                    <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
                        <li><a>Profile</a></li>
                        <li><a @onclick="ShowSettingsModal">Settings</a></li>
                        <li><a>Logout</a></li>
                    </ul>
                </div>
            </div>
        </div>

        @if (isConnecting)
        {
            <div class="text-center">
                <p class="text-gray-500">Connecting to data feed...</p>
                <div class="loading loading-spinner loading-md"></div>
            </div>
        }
        else if (isConnected)
        {
            <!-- Frequency Alert -->
            @if (IsFrequencyOutOfRange())
            {
                <div class="alert alert-error shadow-lg mb-4">
                    <div>
                        <i class="fas fa-exclamation-triangle"></i>
                        <span>Grid Frequency Out of Range: @GetSolarValue("inverter_1/grid_frequency/state") Hz</span>
                    </div>
                </div>
            }

            <!-- System Overview -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                <div class="stats shadow">
                    <div class="stat">
                        <div class="stat-title">Current Power</div>
                        <div class="stat-value">@GetSolarValue("inverter_1/pv_power/state") W</div>
                        <div class="stat-desc">Solar production</div>
                    </div>
                </div>
                <div class="stats shadow">
                    <div class="stat">
                        <div class="stat-title">Battery Usage</div>
                        <div class="stat-value">@GetSolarValue("total/battery_power/state") W</div>
                        <div class="stat-desc">@GetSolarValue("total/battery_state_of_charge/state")%</div>
                    </div>
                </div>
                <div class="stats shadow">
                    <div class="stat">
                        <div class="stat-title">Battery Status</div>
                        <div class="stat-value text-success">@GetSolarValue("total/battery_state_of_charge/state")%</div>
                        <div class="stat-desc">@GetBatteryStatus1("total") at @GetSolarValue("total/battery_power/state") W</div>
                    </div>
                </div>
                <div class="stats shadow">
                    <div class="stat">
                        <div class="stat-title">Grid Status</div>
                        <div class="stat-value text-info">@GetSolarValue("inverter_1/grid_power/state") W</div>
                        <div class="stat-desc">@(int.TryParse(GetSolarValue("inverter_1/grid_power/state"), out int gridPower) && gridPower == 0 ? "StandBy" : "Importing")</div>
                    </div>
                </div>
            </div>

            <div class="card bg-base-100 shadow-xl mb-6">
                <div class="card-body">
                    <h2 class="card-title text-center">Power Flow</h2>
                    <div class="relative flex flex-col items-center p-4 gap-6">
                        <!-- Grid (Above Inverter) -->
                        <div class="flex flex-col items-center mb-4">
                            <i class="fas fa-bolt text-5xl text-info mb-2"></i>
                            <span class="text-xl font-bold">@GetSolarValue("inverter_1/grid_power/state") W</span>
                            <span class="text-sm">Grid Usage</span>
                        </div>
                        <!-- Grid to Inverter Line (Shortened) -->
                        <div class="w-1 h-8 bg-transparent @(float.TryParse(GetSolarValue("inverter_1/grid_power/state"), out float grid) && grid != 0 ? "animate-line-vertical" : "")"></div>

                        <!-- Main Horizontal Flow -->
                        <div class="flex flex-row justify-around items-center w-full relative">
                            <!-- Solar (Left) -->
                            <div class="flex flex-col items-center z-10">
                                <i class="fas fa-solar-panel text-5xl text-warning mb-2"></i>
                                <span class="text-xl font-bold">@GetSolarValue("inverter_1/pv_power/state") W</span>
                                <span class="text-sm">Solar Production</span>
                            </div>
                            <!-- Solar to Inverter Line (Shortened) -->
                            <div class="absolute left-[30%] top-1/2 w-[15%] h-1 transform -translate-y-1/2 @(float.TryParse(GetSolarValue("inverter_1/pv_power/state"), out float solar) && solar != 0 ? "animate-line" : "")"></div>

                            <!-- Inverter (Center) -->
                            <div class="flex flex-col items-center z-10">
                                <i class="fas fa-microchip text-5xl text-info mb-2"></i>
                                <span class="text-xl font-bold">@GetInverterEfficiency()</span>
                                <span class="text-sm">Efficiency</span>
                                <span class="text-sm mt-1">Losses: @GetInverterLosses()</span>
                            </div>

                            <!-- Inverter to Home Line (Shortened) -->
                            <div class="absolute right-[30%] top-1/2 w-[15%] h-1 transform -translate-y-1/2 @(float.TryParse(GetSolarValue("inverter_1/load_power/state"), out float load) && load != 0 ? "animate-line" : "")"></div>

                            <!-- Home (Right) -->
                            <div class="flex flex-col items-center z-10">
                                <i class="fas fa-home text-5xl text-gray-500 mb-2"></i>
                                <span class="text-xl font-bold">@GetSolarValue("inverter_1/load_power/state") W</span>
                                <span class="text-sm">Home Usage</span>
                            </div>
                        </div>

                        <!-- Inverter to Battery Line (Shortened) -->
                        <div class="w-1 h-8 bg-transparent @(float.TryParse(GetSolarValue("total/battery_power/state"), out float battery) && battery != 0 ? "animate-line-vertical" : "")"></div>

                        <!-- Battery (Below Inverter) -->
                        <div class="flex flex-col items-center mt-4">
                            <i class="fas fa-battery-three-quarters text-5xl text-success mb-2"></i>
                            <span class="text-xl font-bold">@GetSolarValue("total/battery_power/state") W</span>
                            <span class="text-sm">Battery</span>
                        </div>
                    </div>
                </div>
            </div>

          
            <!-- Power Source View Section -->

            <div class="card bg-base-100 shadow-xl mb-6">
                <div class="card-body">
                    <h2 class="card-title">Power Source View</h2>
                    <div class="flex flex-col md:flex-row justify-around items-center p-4 gap-6">
                        <span class="text-sm"></span>
                        @{
                            var (solarPct, batteryPct, gridPct) = GetPowerSourcePercentages();
                        }
                        <!-- Solar -->
                        <div class="flex flex-col items-center">
                            <i class="fas fa-sun text-5xl text-warning mb-2"></i>
                            <span class="text-xl font-bold">@solarPct.ToString("F1")%</span>
                            <span class="text-sm">Solar</span>
                        </div>
                        <!-- Battery -->
                        <div class="flex flex-col items-center">
                            <i class="fas fa-battery-full text-5xl text-success mb-2"></i>
                            <span class="text-xl font-bold">@batteryPct.ToString("F1")%</span>
                            <span class="text-sm">Battery</span>
                        </div>
                        <!-- Grid -->
                        <div class="flex flex-col items-center">
                            <i class="fas fa-plug text-5xl text-info mb-2"></i>
                            <span class="text-xl font-bold">@gridPct.ToString("F1")%</span>
                            <span class="text-sm">Grid</span>
                        </div>                       
                    </div>
                </div>
            </div>

            <!-- Battery Charge Gauges -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-6">
                @for (int i = 1; i <= 5; i++)
                {
                    var prefix = $"battery_{i}";
                    var soc = float.TryParse(GetSolarValue($"{prefix}/state_of_charge/state"), out float value) ? value : 0f;
                    var circumference = 282.743f;
                    var dashArray = soc > 0 ? $"{circumference * soc / 100} {circumference}" : "0 282.743";
                    <div class="card bg-base-100 shadow-xl">
                        <div class="card-body flex items-center justify-center">
                            <h2 class="card-title text-center">Battery @i Charge</h2>
                            <div class="radial-gauge relative w-32 h-32">
                                <svg class="w-full h-full" viewBox="0 0 100 100">
                                    <circle cx="50" cy="50" r="45" stroke="#e6e6e6" stroke-width="10" fill="none" />
                                    <circle cx="50" cy="50" r="45" stroke="#34d399" stroke-width="10" fill="none"
                                    stroke-dasharray="@dashArray"
                                    stroke-dashoffset="0"
                                    transform="rotate(-90 50 50)" />
                                </svg>
                                <div class="absolute inset-0 flex items-center justify-center text-2xl font-bold">
                                    @soc%
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- System Details -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div class="card bg-base-100 shadow-xl">
                    <div class="card-body">
                        <h2 class="card-title">Inverter Details</h2>
                        <div class="overflow-x-auto">
                            <table class="table table-zebra">
                                <tbody>
                                    <tr><td>Mode</td><td>@GetSolarValue("inverter_1/device_mode/state")</td></tr>
                                    <tr><td>Status</td><td><span class="badge badge-success">Online</span></td></tr>
                                    <tr><td>Temperature</td><td>@GetSolarValue("inverter_1/temperature/state")°C</td></tr>
                                    <tr><td>PV Power</td><td>@GetSolarValue("inverter_1/pv_power/state") W</td></tr>
                                    <tr><td>Load Power</td><td>@GetSolarValue("inverter_1/load_power/state") W</td></tr>
                                    <tr><td>Grid Power</td><td>@GetSolarValue("inverter_1/grid_power/state") W</td></tr>
                                    <tr><td>AC Output Voltage</td><td>@GetSolarValue("inverter_1/ac_output_voltage/state") V</td></tr>
                                    <tr><td>Grid Voltage</td><td>@GetSolarValue("inverter_1/grid_voltage/state") V</td></tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="card bg-base-100 shadow-xl">
                    <div class="card-body">
                        <h2 class="card-title">Battery Details</h2>
                        <div class="overflow-x-auto">
                            <table class="table table-zebra">
                                <tbody>
                                    <tr><td>Total Battery Time</td><td>@GetBatteryTimeRemaining()</td></tr>
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        var prefix = $"battery_{i}";
                                        <tr><td>Battery @i Model</td><td>@GetSolarValue($"{prefix}/model_name/state")</td></tr>
                                        <tr><td>Status</td><td><span class="badge badge-success">@GetBatteryStatus(prefix)</span></td></tr>
                                        <tr><td>State of Charge</td><td><div class="flex items-center gap-2"><progress class="progress progress-success w-56" value="@GetSolarValue($"{prefix}/state_of_charge/state")" max="100"></progress><span>@GetSolarValue($"{prefix}/state_of_charge/state")%</span></div></td></tr>
                                        <tr><td>Power</td><td>@GetSolarValue($"{prefix}/power/state") W</td></tr>
                                        <tr><td>Temperature</td><td>@GetSolarValue($"{prefix}/temperature/state")°C</td></tr>
                                        <tr><td>Voltage</td><td>@GetSolarValue($"{prefix}/voltage/state") V</td></tr>
                                        <tr><td>Current</td><td>@GetSolarValue($"{prefix}/current/state") A</td></tr>
                                        <tr><td>Cycles</td><td>@GetSolarValue($"{prefix}/cycles/state")</td></tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center space-y-2">
                <p class="text-gray-500">Not connected to Solar Assistant data feed. Configure settings to connect.</p>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <p class="text-red-500 text-sm">@ErrorMessage</p>
                }
                <button class="btn btn-primary" @onclick="ConnectToServer">Connect Now</button>
            </div>
        }

        <!-- Settings Modal -->
        @if (showSettingsModal)
        {
            <div class="modal modal-open">
                <div class="modal-box">
                    <h3 class="font-bold text-lg">Configure Solar Dashboard</h3>
                    <div class="py-4 space-y-4">
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Server URL (e.g., https://localhost:7159)</span>
                            </label>
                            <input type="text" class="input input-bordered" @bind="serverUrl" placeholder="https://localhost:7159" />
                        </div>
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text">Total Battery Capacity (Wh)</span>
                            </label>
                            <input type="number" class="input input-bordered" @bind="batteryCapacity" placeholder="e.g., 5000" min="0" step="100" />
                        </div>
                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <p class="text-sm text-red-500">@ErrorMessage</p>
                        }
                    </div>
                    <div class="modal-action">
                        <button class="btn btn-primary" @onclick="ConnectToServer" disabled="@(isConnecting || (isConnected && !string.IsNullOrEmpty(serverUrl)))">Connect</button>
                        <button class="btn" @onclick="HideSettingsModal">Close</button>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="drawer-side">
        <label for="my-drawer-2" aria-label="close sidebar" class="drawer-overlay"></label>
        <ul class="menu p-4 w-64 min-h-full bg-base-100 text-base-content">
            <li class="mb-4"><div class="flex items-center gap-2"><i class="fas fa-solar-panel text-primary text-2xl"></i><span class="text-xl font-bold">SolarDash</span></div></li>
            <li><a class="active"><i class="fas fa-tachometer-alt mr-2"></i> Dashboard</a></li>
            <li><a @onclick="ShowSettingsModal"><i class="fas fa-cog mr-2"></i> Settings</a></li>
            <div class="divider"></div>
            <div class="bg-base-200 p-4 rounded-lg">
                <h3 class="font-bold mb-2">System Status</h3>
                <div class="flex items-center gap-2 mb-2"><div class="badge badge-success"></div><span>Inverter: Online</span></div>
                <div class="flex items-center gap-2 mb-2"><div class="badge badge-success"></div><span>Battery: @GetBatteryStatus1("total")</span></div>
                <div class="flex items-center gap-2 mb-2"><div class="badge badge-success"></div><span>Grid: @GetGridStatus()</span></div>
                <div class="flex items-center gap-2 mb-2"><div class="badge badge-info"></div><span>Grid Voltage: @GetSolarValue("inverter_1/grid_voltage/state") V</span></div>
                <div class="flex items-center gap-2 mb-2"><div class="badge badge-info"></div><span>Grid Frequency: @GetSolarValue("inverter_1/grid_frequency/state") Hz</span></div>
                <div class="flex items-center gap-2 mb-2">
                    @{
                        string batteryStatus = GetBatteryStatus1("total");
                        string badgeClass = batteryStatus == "Charging" ? "badge-success" : "badge-error";
                    }
                    <div class="badge @badgeClass"></div>
                    <span>Bat: @GetBatteryTimeRemaining()</span>
                </div>
            </div>
        </ul>
    </div>
</div>

<style>
    .animate-line {
        background: linear-gradient(to right, transparent 0%, #3b82f6 50%, transparent 100%);
        background-size: 200% 100%;
        animation: flow 2s linear infinite;
    }

    .animate-line-vertical {
        background: linear-gradient(to bottom, transparent 0%, #3b82f6 50%, transparent 100%);
        background-size: 100% 200%;
        animation: flow-vertical 2s linear infinite;
    }

    @@keyframes flow {
        0% {
            background-position: 200% 0;
        }

        100% {
            background-position: 0 0;
        }
    }

    @@keyframes flow-vertical {
        0% {
            background-position: 0 200%;
        }

        100% {
            background-position: 0 0%;
        }
    }
</style>

@code {
    private Dictionary<string, string> solarData = new();
    private string serverUrl = "https://myhome.adminsoftware.co.za/";
    private float batteryCapacity = 14580; // Default based on your setup (2x US2000C + 3x US3000C)
    private bool isConnected = false;
    private bool isConnecting = false;
    private bool showSettingsModal = false;
    private bool isDarkMode = false;
    private string ErrorMessage { get; set; } = "";
    private HubConnection? hubConnection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isConnected && !string.IsNullOrEmpty(serverUrl))
        {
            await ConnectToServer();
        }
    }

    private async Task ConnectToServer()
    {
        if (string.IsNullOrEmpty(serverUrl))
        {
            ErrorMessage = "Please provide a server URL.";
            Console.WriteLine("Error: Server URL is empty.");
            StateHasChanged();
            return;
        }

        try
        {
            isConnecting = true;
            ErrorMessage = "";
            StateHasChanged();

            if (hubConnection is not null)
            {
                await hubConnection.DisposeAsync();
            }

            Console.WriteLine($"Attempting to connect to {serverUrl}/mqtthub...");
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{serverUrl.TrimEnd('/')}/mqtthub")
                .ConfigureLogging(logging =>
                {
                    logging.AddConsole();
                    logging.SetMinimumLevel(LogLevel.Debug);
                })
                .Build();

            hubConnection.On<string, string>("ReceiveMqttData", async (topic, payload) =>
            {
                //Console.WriteLine($"MQTT Data: Topic={topic}, Payload={payload}");
                solarData[topic] = payload;
                await InvokeAsync(StateHasChanged);
            });

            hubConnection.Closed += async (error) =>
            {
                Console.WriteLine($"Hub connection closed: {error?.Message}");
                isConnected = false;
                isConnecting = false;
                await InvokeAsync(StateHasChanged);
            };

            await hubConnection.StartAsync();
            if (hubConnection.State == HubConnectionState.Connected)
            {
                Console.WriteLine("Connected to SignalR hub.");
                isConnected = true;
                isConnecting = false;
            }
            else
            {
                throw new Exception("Failed to establish connection to the hub.");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Connection failed: {ex.Message}";
            Console.WriteLine($"Connection error: {ex.Message}");
            isConnected = false;
            isConnecting = false;
            StateHasChanged();
        }
    }

    private (float solarPct, float batteryPct, float gridPct) GetPowerSourcePercentages()
    {
        // Parse total home usage (load power)
        if (!float.TryParse(GetSolarValue("inverter_1/load_power/state"), out float loadPower) || loadPower <= 0)
            return (0, 0, 0); // Return 0% if load power is invalid or zero

        // Parse power values from sensors
        float pvPower = float.TryParse(GetSolarValue("inverter_1/pv_power/state"), out float pv) ? pv : 0;
        float batteryPower = float.TryParse(GetSolarValue("total/battery_power/state"), out float bp) ? bp : 0;
        float gridPower = float.TryParse(GetSolarValue("inverter_1/grid_power/state"), out float gp) ? gp : 0;

        // Calculate contributions
        float batteryContribution = batteryPower < 0 ? Math.Abs(batteryPower) : 0; // Battery discharging
        float gridContribution = gridPower > 0 ? gridPower : 0;                    // Grid importing
        float solarContribution = loadPower - batteryContribution - gridContribution; // Solar fills the rest

        // Cap solar contribution at available solar power
        if (solarContribution > pvPower) solarContribution = pvPower;
        if (solarContribution < 0) solarContribution = 0; // Prevent negative values

        // Calculate percentages
        float solarPct = (solarContribution / loadPower) * 100;
        float batteryPct = (batteryContribution / loadPower) * 100;
        float gridPct = (gridContribution / loadPower) * 100;

        return (solarPct, batteryPct, gridPct);
    }

    private void ShowSettingsModal()
    {
        showSettingsModal = true;
        StateHasChanged();
    }

    private void HideSettingsModal()
    {
        showSettingsModal = false;
        StateHasChanged();
    }

    private string GetSolarValue(string key)
    {
        return solarData.TryGetValue($"solar_assistant/{key}", out var value) ? value : "0";
    }

    private string GetBatteryStatus(string prefix)
    {
        if (!int.TryParse(GetSolarValue($"{prefix}/power/state"), out int batteryPower))
        {
            Console.WriteLine($"Failed to parse battery power for {prefix}: {GetSolarValue($"{prefix}/power/state")}");
            return "Unknown";
        }
        // Console.WriteLine($"Battery Status for {prefix}: Power={batteryPower} W, Status={(batteryPower > 0 ? "Charging" : "Discharging")}");
        return batteryPower > 0 ? "Charging" : "Discharging";
    }

    private string GetBatteryStatus1(string prefix)
    {
        if (!int.TryParse(GetSolarValue($"{prefix}/battery_power/state"), out int batteryPower))
        {
            Console.WriteLine($"Failed to parse battery power for {prefix}: {GetSolarValue($"{prefix}/battery_power/state")}");
            return "Unknown";
        }
        // Console.WriteLine($"Battery Status for {prefix}: Power={batteryPower} W, Status={(batteryPower > 0 ? "Charging" : "Discharging")}");
        return batteryPower > 0 ? "Charging" : "Discharging";
    }

    private string GetInverterEfficiency()
    {
        // Parse sensor values, default to 0 if parsing fails
        float P_solar = float.TryParse(GetSolarValue("inverter_1/pv_power/state"), out float solar) ? solar : 0;
        float P_battery = float.TryParse(GetSolarValue("total/battery_power/state"), out float battery) ? battery : 0;
        float P_grid = float.TryParse(GetSolarValue("inverter_1/grid_power/state"), out float gridPower) ? gridPower : 0;
        float P_load = float.TryParse(GetSolarValue("inverter_1/load_power/state"), out float load) ? load : 0;

        // Instantiate calculator
        var calculator = new PowerEfficiencyCalculator(P_solar, P_battery, P_grid, P_load);

        // Return efficiency formatted to 1 decimal place
        return calculator.GetEfficiency().ToString("F1") + "%";
    }
    private string GetInverterLosses()
    {
        // Parse sensor values (same as above)
        float P_solar = float.TryParse(GetSolarValue("inverter_1/pv_power/state"), out float solar) ? solar : 0;
        float P_battery = float.TryParse(GetSolarValue("total/battery_power/state"), out float battery) ? battery : 0;
        float P_grid = float.TryParse(GetSolarValue("inverter_1/grid_power/state"), out float grid) ? grid : 0;
        float P_load = float.TryParse(GetSolarValue("inverter_1/load_power/state"), out float load) ? load : 0;

        // Instantiate calculator
        var calculator = new PowerEfficiencyCalculator(P_solar, P_battery, P_grid, P_load);

        // Return losses formatted as whole watts
        return calculator.GetLosses().ToString("F0") + " W";
    }
    private string GetBatteryTimeRemaining()
    {
        if (!float.TryParse(GetSolarValue("total/battery_state_of_charge/state"), out float soc) ||
            !float.TryParse(GetSolarValue("total/battery_power/state"), out float batteryPower) ||
            batteryCapacity <= 0)
            return "N/A";

        if (batteryPower == 0)
            return "N/A"; // No change in charge

        float energyRemaining; // Wh
        string status;
        if (batteryPower > 0) // Charging
        {
            energyRemaining = (100 - soc) * batteryCapacity / 100; // Wh to full charge
            status = "to full";
        }
        else // Discharging
        {
            energyRemaining = soc * batteryCapacity / 100; // Wh to depletion
            batteryPower = Math.Abs(batteryPower); // Use positive value for calculation
            status = "to empty";
        }

        float hours = energyRemaining / batteryPower;
        if (hours > 1000 || hours < 0) // Unrealistic values
            return "N/A";

        TimeSpan time = TimeSpan.FromHours(hours);
        return $"{time.Hours}h {time.Minutes}m {status}";
    }

    private float GetGridPercentage()
    {
        // Get home consumption (load power)
        if (!float.TryParse(GetSolarValue("inverter_1/load_power/state"), out float loadPower) || loadPower <= 0)
            return 0;

        // Get grid power (positive for import, negative for export)
        float gridPower = float.TryParse(GetSolarValue("inverter_1/grid_power/state"), out float gp) ? gp : 0;

        // Only consider grid power when importing (gridPower > 0)
        float gridContribution = gridPower > 0 ? gridPower : 0;

        // Calculate grid percentage
        return (gridContribution / loadPower) * 100;
    }

    private float GetInverterUsagePercentage()
    {
        float gridPct = GetGridPercentage();
        return 100 - gridPct;
    }

    private string GetGridStatus()
    {
        string voltageString = GetSolarValue("inverter_1/grid_voltage/state");
        // Remove all characters except digits, decimal point, and negative sign
        voltageString = System.Text.RegularExpressions.Regex.Replace(voltageString, @"[^\d.-]", "");
        // Parse using invariant culture to ensure '.' is recognized
        if (float.TryParse(voltageString, System.Globalization.NumberStyles.Float,
                           System.Globalization.CultureInfo.InvariantCulture, out float gridVoltage))
        {
            return gridVoltage > 0 ? "Connected" : "Offline";
        }
        return "Unknown";
    }

    private bool IsFrequencyOutOfRange()
    {
        if (float.TryParse(GetSolarValue("inverter_1/grid_frequency/state"), out float frequency))
        {
            return frequency < 49 || frequency > 51;
        }
        return false; // If parsing fails, assume no alert
    }

    public void Dispose()
    {
        hubConnection?.DisposeAsync().AsTask().Wait();
    }
}