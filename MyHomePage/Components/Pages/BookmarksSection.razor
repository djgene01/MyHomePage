@using System.Text.Json
@inject IJSRuntime JS

<div class="card bg-base-100 dark:bg-gray-800 shadow-xl">
    <div class="card-body">
        <h2 class="card-title text-xl mb-4 text-gray-900 dark:text-gray-100">
            <i class="fas fa-bookmark text-primary mr-2"></i>Bookmarks
        </h2>

        <!-- Category Selector -->
        <div class="flex items-center gap-2 mb-4">
            <select class="select select-bordered w-full max-w-xs text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-700"
                    @onchange="HandleCategoryChange">
                @foreach (var category in Categories)
                {
                        <option value="@category" selected="@(category == selectedCategory)">@category</option>
                }
            </select>
            <button class="btn btn-ghost btn-sm text-gray-900 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-600" 
                    @onclick="AddNewCategory" 
                    title="Add Category">
                <i class="fas fa-plus"></i>
            </button>
        </div>

        <!-- Bookmarks Grid -->
        <div class="grid grid-cols-2 gap-3 max-h-64 overflow-y-auto">
            @foreach (var bookmark in Bookmarks.Where(b => b.Category == selectedCategory))
            {
                    <div class="flex items-center gap-2">
                        <a href="@bookmark.Url" target="_blank" 
                           class="btn btn-outline btn-sm flex-1 flex items-center justify-start text-gray-900 dark:text-gray-100">
                            <i class="fas fa-link mr-2"></i>@bookmark.Name
                        </a>
                        <button class="btn btn-ghost btn-sm text-error" 
                                @onclick="() => RemoveBookmark(bookmark)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
            }
        </div>

        <!-- Add Bookmark Form -->
        <div class="divider"></div>
        <div class="flex gap-2">
            <input type="text" placeholder="Site name" 
                   class="input input-bordered input-sm w-1/3 text-gray-900 dark:text-gray-100" 
                   @bind="newBookmarkName" />
            <input type="text" placeholder="URL (https://...)" 
                   class="input input-bordered input-sm flex-1 text-gray-900 dark:text-gray-100" 
                   @bind="newBookmarkUrl" />
            <button class="btn btn-primary btn-sm" @onclick="AddBookmark">Add</button>
        </div>
    </div>
</div>

@code {
    private List<Bookmark> Bookmarks { get; set; } = new();
    private List<string> Categories { get; set; } = new() { "Search", "Coding", "Ai", "Media", "Social Media" };
    private string selectedCategory = "Search";
    private string newBookmarkName = "";
    private string newBookmarkUrl = "";
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            var savedBookmarks = await JS.InvokeAsync<string>("localStorage.getItem", "bookmarks");
            if (!string.IsNullOrEmpty(savedBookmarks))
            {
                Bookmarks = JsonSerializer.Deserialize<List<Bookmark>>(savedBookmarks) ?? new();
                Categories = Bookmarks.Select(b => b.Category).Distinct().ToList();
                if (!Categories.Any()) Categories.Add("Search");
                if (!Categories.Any()) Categories.Add("Coding");
                if (!Categories.Any()) Categories.Add("Ai");
                if (!Categories.Any()) Categories.Add("Media");
                if (!Categories.Any()) Categories.Add("Social Media");

            }
            else
            {
                // Default bookmarks
                Bookmarks = new List<Bookmark>
                {
                    new Bookmark { Name = "Google", Url = "https://google.com", Category = "Search" },
                    new Bookmark { Name = "GitHub", Url = "https://github.com", Category = "Coding" },
                    new Bookmark { Name = "Tech-On", Url = "https://tech-on.co.za", Category = "Coding" },
                    new Bookmark { Name = "Claude", Url = "https://claude.ai", Category = "Ai" },
                    new Bookmark { Name = "Tailwind", Url = "https://www.tailwindai.dev/", Category = "Ai" },
                    new Bookmark { Name = "YouTube", Url = "https://youtube.com", Category = "Media" },
                    new Bookmark { Name = "X", Url = "https://X.com", Category = "Social Media" },
                    new Bookmark { Name = "LinkedIn", Url = "https://linkedin.com", Category = "Social Media" },
                    new Bookmark { Name = "Reddit", Url = "https://reddit.com", Category = "Social Media" }
                };
            }
            selectedCategory = Categories.First();
            isInitialized = true;
            StateHasChanged();
        }
    }

    private async Task AddBookmark()
    {
        if (!string.IsNullOrEmpty(newBookmarkName) && !string.IsNullOrEmpty(newBookmarkUrl))
        {
            var bookmark = new Bookmark
                {
                    Name = newBookmarkName,
                    Url = newBookmarkUrl,
                    Category = selectedCategory
                };
            Bookmarks.Add(bookmark);
            await JS.InvokeVoidAsync("localStorage.setItem", "bookmarks", JsonSerializer.Serialize(Bookmarks));
            newBookmarkName = "";
            newBookmarkUrl = "";
            StateHasChanged();
        }
    }

    private async Task RemoveBookmark(Bookmark bookmark)
    {
        Bookmarks.Remove(bookmark);
        await JS.InvokeVoidAsync("localStorage.setItem", "bookmarks", JsonSerializer.Serialize(Bookmarks));
        StateHasChanged();
    }

    private void HandleCategoryChange(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? Categories.First();
        StateHasChanged();
    }

    private async Task AddNewCategory()
    {
        var categoryName = await JS.InvokeAsync<string>("prompt", "Enter category name:");
        if (!string.IsNullOrEmpty(categoryName) && !Categories.Contains(categoryName))
        {
            Categories.Add(categoryName);
            selectedCategory = categoryName;
            StateHasChanged();
        }
    }

    private class Bookmark
    {
        public string Name { get; set; } = "";
        public string Url { get; set; } = "";
        public string Category { get; set; } = "General";
    }
}