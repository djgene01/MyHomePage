@using System.Text.Json
@inject IJSRuntime JS

<div class="card bg-base-100 shadow-xl">
    <div class="card-body">
        <h2 class="card-title text-xl mb-4">
            <i class="fas fa-bookmark text-primary mr-2"></i>Bookmarks
        </h2>
        <div class="grid grid-cols-2 gap-3">
            @foreach (var bookmark in Bookmarks)
            {
                <a href="@bookmark.Url" target="_blank" class="btn btn-outline btn-sm flex items-center justify-start">
                    <i class="fas fa-link mr-2"></i>@bookmark.Name
                </a>
            }
        </div>
        <div class="divider"></div>
        <div class="flex gap-2">
            <input type="text" placeholder="Site name" class="input input-bordered input-sm w-1/3" @bind="newBookmarkName" />
            <input type="text" placeholder="URL (https://...)" class="input input-bordered input-sm flex-1" @bind="newBookmarkUrl" />
            <button class="btn btn-primary btn-sm" @onclick="AddBookmark">Add</button>
        </div>
    </div>
</div>

@code {
    private List<Bookmark> Bookmarks { get; set; } = new();
    private string newBookmarkName = "";
    private string newBookmarkUrl = "";
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            var savedBookmarks = await JS.InvokeAsync<string>("localStorage.getItem", "bookmarks");
            if (!string.IsNullOrEmpty(savedBookmarks))
            {
                Bookmarks = JsonSerializer.Deserialize<List<Bookmark>>(savedBookmarks) ?? new();
            }
            else
            {
                // Default bookmarks
                Bookmarks = new List<Bookmark>
                {
                    new Bookmark { Name = "Google", Url = "https://google.com" },
                    new Bookmark { Name = "GitHub", Url = "https://github.com" },
                    new Bookmark { Name = "YouTube", Url = "https://youtube.com" },
                    new Bookmark { Name = "Twitter", Url = "https://twitter.com" },
                    new Bookmark { Name = "LinkedIn", Url = "https://linkedin.com" },
                    new Bookmark { Name = "Reddit", Url = "https://reddit.com" }
                };
            }
            isInitialized = true;
            StateHasChanged();
        }
    }

    private async Task AddBookmark()
    {
        if (!string.IsNullOrEmpty(newBookmarkName) && !string.IsNullOrEmpty(newBookmarkUrl))
        {
            Bookmarks.Add(new Bookmark { Name = newBookmarkName, Url = newBookmarkUrl });
            await JS.InvokeVoidAsync("localStorage.setItem", "bookmarks", JsonSerializer.Serialize(Bookmarks));
            newBookmarkName = "";
            newBookmarkUrl = "";
            StateHasChanged();
        }
    }

    private class Bookmark
    {
        public string Name { get; set; } = "";
        public string Url { get; set; } = "";
    }
}